// Generated by CoffeeScript 1.7.1
var anyRank, async, fastSimpleQuery, frequencyQuery, genderQuery, isNumber, isUndefined, knex, limitQuery, raceQuery, rankQuery, sanitizeGender, sanitizeYear, yearQuery, _;

knex = require("knex").knex;

async = require("async");

_ = require('lodash');

fastSimpleQuery = function(context) {
  return context.where(knex.raw("id in (select (random()*(select last_value from surnames_id_seq))::bigint from generate_series(1,120))"));
};

frequencyQuery = function(context, freq) {
  if (freq === "low") {
    return context.where("frequency", "<", 0.06);
  } else if (freq === "medium") {
    return context.where("frequency", ">=", 0.06).andWhere("frequency", "<", 1);
  } else if (freq === "high") {
    return context.where("frequency", ">=", 1);
  } else {
    return fastSimpleQuery(context);
  }
};

raceQuery = function(context, raceArray) {
  if ((["pctwhite", "pctasian", "pctnative", "pctblack", "pcthispanic"].indexOf(raceArray[0]) > -1) && isNumber(raceArray[1])) {
    return context.where(raceArray[0], ">", Math.abs(raceArray[1]));
  } else {
    return fastSimpleQuery(context);
  }
};

limitQuery = function(limit) {
  if ((limit <= 100) && (limit >= 1)) {
    return limit;
  } else {
    return 10;
  }
};

yearQuery = function(context, req_year) {
  var year;
  year = sanitizeYear(req_year);
  return context.where({
    year: year
  });
};

sanitizeYear = function(rawYear) {
  var validYears;
  validYears = _.range(1880, 2012);
  validYears.push(0);
  if (validYears.indexOf(parseInt(rawYear)) > -1) {
    return parseInt(rawYear);
  } else {
    return 0;
  }
};

genderQuery = function(context, req_gender) {
  var gender;
  console.log("The requested gender is " + req_gender);
  gender = sanitizeGender(req_gender);
  if (gender) {
    return context.where({
      gender: gender
    });
  } else {
    return context.where('gender', 'LIKE', '%');
  }
};

sanitizeGender = function(rawGender) {
  var gender, validGenders;
  validGenders = ['male', 'female'];
  if (validGenders.indexOf(rawGender > -1)) {
    gender = {
      'male': 'M',
      'female': 'F'
    };
    return gender[rawGender];
  } else {
    return false;
  }
};

rankQuery = function(context, req_rank, maxRank) {
  console.log("rankQuery called with " + req_rank + " and maxRank " + maxRank);
  if (_.isString(req_rank)) {
    console.log("" + req_rank + " exists.");
    if (maxRank > 500) {
      console.log("Above 500. The rank is " + req_rank);
      if (req_rank === "low") {
        return context.where("rank", ">", 300);
      } else if (req_rank === "medium") {
        return context.where("rank", ">", 150).andWhere("rank", "<=", 300);
      } else if (req_rank === "high") {
        return context.where("rank", "<=", 150);
      } else {
        return anyRank(context);
      }
    } else if (maxRank < 500) {
      console.log("Below 500. The rank is " + req_rank);
      if (req_rank === "low") {
        return context.where("rank", ">", 100);
      } else if (req_rank === "medium") {
        return context.where("rank", ">", 50).andWhere("rank", "<=", 100);
      } else if (req_rank === 'high') {
        return context.where("rank", "<=", 50);
      } else {
        return anyRank(context);
      }
    }
  } else {
    return anyRank(context);
  }
};

anyRank = function(context) {
  return context.where("rank", ">=", 0);
};

isUndefined = function(element, index, array) {
  return element === undefined;
};

module.exports.isUndefined = isUndefined;

module.exports.limitQuery = limitQuery;

module.exports.fast = fastSimpleQuery;

module.exports.frequencyQuery = frequencyQuery;

module.exports.raceQuery = raceQuery;

module.exports.yearQuery = yearQuery;

module.exports.genderQuery = genderQuery;

module.exports.rankQuery = rankQuery;

module.exports.sanitizeGender = sanitizeGender;

module.exports.sanitizeYear = sanitizeYear;

isNumber = function(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
