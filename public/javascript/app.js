// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  var AppView, Name, NameList, NameView, app, getNamesForScroll, nameList, nameView, throttledGetNamesForScroll;
  Name = (function(_super) {
    __extends(Name, _super);

    function Name() {
      return Name.__super__.constructor.apply(this, arguments);
    }

    Name.prototype.defaults = {
      first: 'Simon',
      last: 'Ganz'
    };

    Name.prototype.initialize = function() {};

    return Name;

  })(Backbone.Model);
  NameView = (function(_super) {
    __extends(NameView, _super);

    function NameView() {
      this.render = __bind(this.render, this);
      return NameView.__super__.constructor.apply(this, arguments);
    }

    NameView.prototype.className = 'nameRow';

    NameView.prototype.tmpl = _.template($("#name-template").html());

    NameView.prototype.initialize = function() {};

    NameView.prototype.render = function() {
      this.$el.html(this.tmpl(this.model.toJSON()));
      return this;
    };

    return NameView;

  })(Backbone.View);
  NameList = (function(_super) {
    __extends(NameList, _super);

    function NameList() {
      return NameList.__super__.constructor.apply(this, arguments);
    }

    NameList.prototype.model = Name;

    NameList.prototype.getNames = function(name) {
      return $.getJSON('api/names', {
        limit: 100,
        rank: 'high',
        frequency: 'high',
        gender: 'female'
      }, (function(_this) {
        return function(data) {
          return _.forEach(data.names, function(name) {
            return _this.add({
              first: name[0].name,
              last: name[1].name
            });
          });
        };
      })(this));
    };

    return NameList;

  })(Backbone.Collection);
  AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = '#raandy';

    AppView.prototype.initialize = function() {
      this.listenTo(nameList, 'add', this.addOne);
      return nameList.getNames();
    };

    AppView.prototype.addOne = function(name) {
      var view;
      view = new NameView({
        model: name
      });
      return $('#nameTable').append(view.render().el);
    };

    return AppView;

  })(Backbone.View);
  nameView = new NameView({
    model: name
  });
  nameList = new NameList;
  app = new AppView;
  getNamesForScroll = function() {
    console.log("Infinite Scroll: Loading Names");
    return nameList.getNames();
  };
  throttledGetNamesForScroll = _.throttle(getNamesForScroll, 2000, {
    'trailing': false
  });
  $(window).scroll(function() {
    if ($(window).scrollTop() + $(window).height() + 500 >= $(document).height()) {
      return throttledGetNamesForScroll();
    }
  });
  return $('#settingsBtn').on('click', function() {
    if ($('.topBar').css("max-height") === "16rem") {
      $('.topBar').css("max-height", "2rem");
      $('.controlDrawer').css("margin-top", "-14rem");
      $('#nameTable').css("padding-top", "2rem");
      return console.log($('.topBar').height());
    } else {
      $('.topBar').css("max-height", "16rem");
      $('.controlDrawer').css("margin-top", "0");
      $('#nameTable').css("padding-top", "16rem");
      return console.log($('.topBar').height());
    }
  });
});
