// Generated by CoffeeScript 1.7.1
var async, expect, request;

request = require("superagent");

expect = require("expect.js");

async = require("async");

describe("Server", function() {
  return it("responds to basic requests", function(done) {
    return request.get("localhost:3000/").end(function(res) {
      expect(res).to.exist;
      expect(res.status).to.equal(200);
      return done();
    });
  });
});

describe("API", function() {
  return describe("surnames", function() {
    it("responds to /api/surnames", function(done) {
      return request.get("localhost:3000/api/surnames").end(function(res) {
        expect(res).to.exist;
        expect(res.status).to.equal(200);
        return done();
      });
    });
    it("returns a JSON array of 10 names by default", function(done) {
      return request.get("localhost:3000/api/surnames").end(function(res) {
        expect(res.body).to.exist;
        expect(res.body).to.not.be.empty();
        expect(res.body).to.have.key("surnames");
        expect(res.body.surnames).to.be.an(Array);
        expect(res.body.surnames).to.have.length(10);
        return done();
      });
    });
    describe("the limit query", function() {
      it("changes the number of results", function(done) {
        return request.get("localhost:3000/api/surnames?limit=23").end(function(res) {
          expect(res.body).to.exist;
          expect(res.body.surnames).to.have.length(23);
          return done();
        });
      });
      return it("returns 10 results if the limit is over 100 or under 0", function(done) {
        return request.get("localhost:3000/api/surnames?limit=130").end(function(res) {
          expect(res.body.surnames).to.have.length(10);
          return done();
        });
      });
    });
    return describe("the frequency query", function() {
      it("low returns names with frequencies below 0.1", function(done) {
        return request.get("localhost:3000/api/surnames?frequency=low").end(function(res) {
          async.each(res.body.surnames, function(name) {
            return expect(name.frequency).to.be.lessThan(0.1);
          });
          return done();
        });
      });
      it("medium returns names with frequencies >= 0.06 and < 1", function(done) {
        return request.get("localhost:3000/api/surnames?frequency=medium").end(function(res) {
          async.each(res.body.surnames, function(name) {
            expect(name.frequency).to.be.greaterThan(0.059);
            return expect(name.frequency).to.be.lessThan(1);
          });
          return done();
        });
      });
      return it("high returns names with frequencies >=1", function(done) {
        return request.get("localhost:3000/api/surnames?frequency=high").end(function(res) {
          async.each(res.body.surnames, function(name) {
            return expect(name.frequency).to.be.greaterThan(0.99);
          });
          return done();
        });
      });
    });
  });
});
